/* 
    Cellular STAR Watchdog for Armand

    This program received a serial string via USB from the Labview program controlling a STAR System that
    is sent each time a treatment is completed and:
    1. Parses the string into STAR System id, position, and an error flag
    2. Calculates the duration in between strings received from the STAR System
    3. Publish the data to the Particle.io console
    4. Send the elapsed time back to the Labview program of the STAR System
    5. Publish the data to a ThingSpeak Channel
    6. Monitor for issues
        a. If the time between Labview messages is too great, send a crash text via Twilio webhook
        b. If a error message is received, send a error text via Twilio webhook
    
    Created 16 April 2023
    By Ian Enochs

    Modified 30 April 2023
    By Ian Enochs

    
    https://github.com/ienochs/STARSystem/blob/main/Particle/cellularStarWatchdogAarmand
*/

#include <ThingSpeak.h>// include the ThingSpeak library
TCPClient client;// create client that can connect to an IP and channel

//Global variables unique to an individual STAR System
unsigned long myChannelNumber = 2108194;// ThingSpeak channel number
const char * myWriteAPIKey = "KCR7FS4DIWGU9SNY";// Thingspeak channel write API key
String starName = "Armand";// name of STAR System

//Global variables that can be shared across STAR Systems
String commandString = "";// serial string received from STAR System
int position;// position just completed by STAR System
long millisStart;// time in millisecond at the start of an event duration
long elapsedTimeSec;// duration in seconds between serial strings received from STAR System
int maxTimeSec = 180;// maximum duration in seconds b3etween serial strings before alert is sent
bool errorAlerted = false;// flag if error was alerted


//Setup
void setup() {
    commandString.reserve(200);// reserve characters for the commandString                          
    Serial.begin(9600);// begin serial communication
    millisStart = millis();// set millisStart to the current time in milliseconds
    ThingSpeak.begin(client);// start the ThingSpeak client
}

//Main loop
void loop() {
    //Receive serial signals from the STAR System
    while (Serial.available()) {
        char inChar = (char)Serial.read();// get the new byte:
        commandString += inChar;// add new byte to inputString:
        if (inChar == '\n') {// if incoming char is new line, flag that transmission is complete
            processCommand();// process the serial string from the STAR System
        }
    }
    
    //Check the time between serial strings received
    long millisNow = millis();// create local variable millisNow and set it to the current time in milliseconds
    elapsedTimeSec = ((millisNow-millisStart)/1000);// calculate the time in seconds since the last string received from the STAR System
    if (elapsedTimeSec > maxTimeSec){// check if the time since the last string received from the STAR System is greater than the max duration allowed without an alert
        sendCrashText();// send crash alert since the max duration between serial strings received has been exceeded
    }
}

//Process the serial string from the STAR System
void processCommand() {
    int index[4];// create a vector of integers named index that will contain the location of each comma in the substring
    index[0] = commandString.indexOf(',');// identify the position of the first comma and put that position in the first position of index
    //populates the index vector with the positions of commas 2-3
    for (int i = 1; i<5; i++){
        index[i] = commandString.indexOf(',',(index[i-1]+1));
    }

    //Create substrings from the commandString (item 1 in program description)
    String robotString = commandString.substring(index[0]+1,index[1]);// create robot string, first in line of commandString
    String positionString = commandString.substring(index[1]+1,index[2]);// create position string, second in line of commandString
    String syringeErrorString = commandString.substring(index[2]+1,index[2]+2);// create syringe error string, third in line of commandString
    String armErrorString = commandString.substring(index[3]+1,index[3]+2);// create arm error string, fourth in line of commandString


    //Calculates the duration in between strings received from the STAR System (item 2 in program description)
    String elapsedTimeSecString = String(elapsedTimeSec);

    //Communicate data to Particle.io console (item 3 in program description)
    String broadcastString = (positionString + "," + elapsedTimeSecString+ "," + syringeErrorString+ "," + armErrorString);// concatenates data strings into a broadcastString
    Particle.publish(starName, broadcastString, PRIVATE);// send the broadcast

    //Send the elapsed time back to the Labview program of the STAR System (item 4 in program description)
    Serial.println(elapsedTimeSecString);
    
    //Communicates data fields to ThingSpeak (item 5 in program description)
    ThingSpeak.setField(1,positionString);// set positionString to field 1 of the ThingSpeak data channel
    ThingSpeak.setField(2,elapsedTimeSec);// set elapsedTime to field 2 of the ThingSpeak data channel
    ThingSpeak.setField(3,syringeErrorString);// set errorString to field 3 of the ThingSpeak data channel
    ThingSpeak.setField(4,armErrorString);// set errorString to field 3 of the ThingSpeak data channel

    ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);// send all fields to ThingSpeak using the channel number and write API key

    //Identify if there is an error flagged in the serial data from the STAR System
    if (syringeErrorString == "Y" && errorAlerted == false){// identify if there is an error and an error text has not previously been alerted during this boot up
        sendErrorText;// send an error alert text
    }

    if (armErrorString == "Y" && errorAlerted == false){// identify if there is an error and an error text has not previously been alerted during this boot up
        sendErrorText;// send an error alert text
    }

    //Resets variables for serial commands and timing
    commandString = "";// reset the commandString
    millisStart = millis();// reset the millisStart to the time now in millis
}

//Send crash alert text message (item 6a in program description)
void sendCrashText(){
    String smsText = (starName + " computer has crashed");// create the text to be sent via text message with the name of the STAR System
    Particle.publish("twilio_sms_enochs", smsText, PRIVATE);// send text to twilio webhook tied to receiver
    delay(500);// delay 0.5 seconds
    Particle.publish("twilio_sms_soderberg", smsText, PRIVATE);// send text to twilio webhook tied to receiver
    delay(500);// delay 0.5 seconds
    Particle.publish("twilio_sms_palacio", smsText, PRIVATE);// send text to twilio webhook tied to receiver
    delay(500);// delay 0.5 seconds
    millisStart = millis();// reset timer so text message isn't continuously broadcasted
}

//Send error alert text message (item 6b in program description)
void sendErrorText(){
    String smsText = (starName + " has encountered an error, computer is still running");// create the text to be sent via text message with the name of the STAR System
    Particle.publish("twilio_sms_enochs", smsText, PRIVATE);// send text to twilio webhook tied to receiver
    delay(500);// delay 0.5 seconds
    Particle.publish("twilio_sms_soderberg", smsText, PRIVATE);// send text to twilio webhook tied to receiver
    delay(500);// delay 0.5 seconds
    Particle.publish("twilio_sms_palacio", smsText, PRIVATE);// send text to twilio webhook tied to receiver
    delay(500);// delay 0.5 seconds
    errorAlerted = true;// set the error alerted flag to true
}
